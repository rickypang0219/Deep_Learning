# Building LSTM for predicting stock price for a company (e.g. Google)

# Data Processing
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Import data and training set
dataset_train = pd.read_csv('Google_Stock_Price_Train.csv')
training_set = dataset_train.iloc[:, 1:2].values

# Feature Engineering:
# Normalize the training dataset since LSTM uses lots of Sigmoid function

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set)

# Creating a data structure with 60 timestamps and 1 output
# 60 timestamp = 60 Financial Date ~ 3 Months
X_train = np.array( [ training_set_scaled[i-60:i, 0] for i in range(60, int(training_set.shape[0])) ])
y_train = np.array( [ training_set_scaled[i, 0] for i in range(60, int(training_set.shape[0])) ])

# Reshaping the data
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1) )



# Build the RNN with Keras
# The following code is generated by ChatGPT !!

from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense

# Define the LSTM model with dropout
model = Sequential()

# The first LSTM Layer
model.add(LSTM(units=64, input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=True))
model.add(Dropout(0.2))

# Second LSTM layer
model.add(LSTM(units=64, return_sequences=True))
model.add(Dropout(0.2))

# Third LSTM Layer
model.add(LSTM(units=16, return_sequences=True))
model.add(Dropout(0.2))

# Final LSTM Layer
model.add(LSTM(units=64))
model.add(Dropout(0.2))

# The purpose of using model.add(Dense(units=1)) in a Keras model with LSTM layers is to add a fully connected layer
# with one neuron (or unit) at the end of the model to produce a single output value.
model.add(Dense(units=1))

# Compile the LSTM model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the LSTM model
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))





